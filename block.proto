syntax = "proto3";

package block_proto;

service BlockGrpcService {
  // wallet rpc
  rpc WalletTokenPrice(WalletTokenPriceRequest) returns (WalletTokenPriceResponse) {}
  rpc WalletTxDetails(WalletTxDetailsRequest) returns (WalletTxListResponse) {}
  rpc WalletTokenUpdated(WalletTokenUpdatedRequest) returns (WalletTokenListAndVersionResponse) {}
  rpc WalletTokenSearch(WalletTokenSearchRequest) returns (WalletTokenListResponse) {}
  rpc WalletGetTokenListByType(WalletGetTokenListByTypeRequest) returns (WalletTokenListAndVersionResponse) {}
  rpc WalletGetTransactionList(WalletTxListRequest) returns (WalletTxListResponse) {}

  // block explorer
  rpc CountTransactionByTimeRange(CountByTimeRangeRequest) returns (CountByTimeRangeResponse) {}
  rpc GetBlocks(GetBlocksRequest) returns (GetBlocksResponse) {}
  rpc CountTransactionByBlockNumber(CountTransactionByBlockNumberRequest) returns (CountTransactionByBlockNumberResponse) {}
  rpc CountAccountByTimeRange(CountByTimeRangeRequest) returns (CountByTimeRangeResponse) {}
  rpc CountContractByTimeRange(CountByTimeRangeRequest) returns (CountByTimeRangeResponse) {}
  rpc ApiVerifyTokenSymbol(ApiVerifyTokenContractRequest) returns (ApiVerifyTokenContractResponse) {}
}

// wallet
message WalletTokenPriceRequest {
  message TokenData {
    string contract_address = 1;
    string symbol = 2;
  }

  repeated TokenData token_data_array = 1;
}

message WalletTokenPriceResponse {
  ReturnCode code = 1;
  string message = 2;

  message TokenPriceData {
    string contract_address = 1;
    string symbol = 2;
    string price = 3;
  }
  repeated TokenPriceData token_price_data_array = 3;
}

message WalletTxDetailsRequest {
  string tx_hash = 1;
}

message WalletTokenUpdatedRequest {
  uint32 version = 1;
}

message WalletTokenListAndVersionResponse {
  ReturnCode code = 1;
  string message = 2;

  message TokenItem {
    string symbol = 1;
    string name = 2;
    string contract_address = 3;
    string gas_limit = 4;
    uint32 decimal = 5;
    string icon = 6;
    bool is_popular = 7;
    bool add_by_default = 8;
    string token_type = 9;
    uint32 version = 10;
  }
  repeated TokenItem token_item_array = 3;
  uint32 latest_version = 4;
}

message WalletTokenSearchRequest {
  string keyword = 1;
}

message WalletGetTokenListByTypeRequest {
  enum TokenListType {
    ALL = 0;
    POPULAR = 1;
    DEFAULT = 2;
  }

  TokenListType type = 1;
}

message WalletTokenListResponse {
  ReturnCode code = 1;
  string message = 2;

  message TokenItem {
    string symbol = 1;
    string name = 2;
    string contract_address = 3;
    string gas_limit = 4;
    uint32 decimal = 5;
    string icon = 6;
    bool is_popular = 7;
    bool add_by_default = 8;
    string token_type = 9;
    uint32 version = 10;
  }
  repeated TokenItem token_item_array = 3;
}

message WalletTxListRequest {
  string account_address = 1;
  string contract_address = 2;
  uint32 page_number = 3;
  uint32 page_size = 4;
}

message WalletTxListResponse {
  ReturnCode code = 1;
  string message = 2;

  message TxItem {
    string block_number = 1;
    string timestamp = 2;
    string transaction_hash = 3;
    string nonce = 4;
    string block_hash = 5;
    string from = 6;
    string contract_address = 7;
    string to = 8;
    string value = 9;
    string transaction_index = 10;
    string gas = 11;
    string gas_price = 12;
    string gas_used = 13;
    string cumulative_gas_used = 14;
    string input = 15;
    bool confirmed = 16;
    int32 receipt_status = 17;
  }
  repeated TxItem tx_item_array = 3;
}

// block explorer (api)
message CountTransactionByBlockNumberRequest {
  uint64 block_number = 1;
}

message CountTransactionByBlockNumberResponse {
  ReturnCode code = 1;
  string message = 2;

  uint64 transaction_count = 3;
}

message GetBlocksRequest {
  uint32 limit = 1;
}

message GetBlocksResponse {
  ReturnCode code = 1;
  string message = 2;

  message BlockItem {
    uint64 block_number = 1;
    uint64 block_time = 2;
    string block_hash = 3;
    string parent_hash = 4;
    string coinbase = 5;
    uint64 gas_limit = 6;
  }
  repeated BlockItem block_item_array = 3;
}

message CountByTimeRangeRequest {
  uint64 begin_timestamp = 1;
  uint64 end_timestamp = 2;
}

message CountByTimeRangeResponse {
  ReturnCode code = 1;
  string message = 2;

  uint64 count = 3;
}

message ApiVerifyTokenContractRequest {
  string token_symbol = 1;
}

message ApiVerifyTokenContractResponse {
  ReturnCode code = 1;
  string message = 2;

  bool is_verified_token = 3;
  string token_contract_address = 4;
}

enum ReturnCode {
    OK = 0;
    INTERNAL_ERROR = 1;
    REQUEST_PARAM_ILLEGAL = 2;
    OTHER_ERROR = 99;
}
